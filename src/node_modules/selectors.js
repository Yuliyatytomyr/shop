export const getPhoneById = (state, id) => state.phones[id];

export const getActiveCategoryId = ownProps => ownProps.match.params.id;

export const getPhones = (state, ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps);

    const phones = state.phonesPage.ids.map(id => getPhoneById(state,id));

    const filterCategory = (item, items, search) => {
        if (search) {
            const filteredByCategory = items.filter(data => {
                return data.categoryId === item
            });
            return filterProduct(search, filteredByCategory)
        }
        return items.filter(data => {
            return data.categoryId === item
        });

    };

    const filterProduct = (item = '', items) => {
        return items.filter(data => {
            return data.name.toLowerCase().indexOf(item.toLowerCase()) > -1;
        });
    };

    return (
        activeCategoryId ? (
            filterCategory(activeCategoryId, phones, state.phonesPage.search)
        ) : (
            filterProduct(state.phonesPage.search, phones)
        )
    )
};

export const  getRenderedPhonesLength = state => state.phonesPage.ids.length;

export const getTotalBasketCount = state => state.basket.length;

export const getTotalBasketPrice = state => {
    const price = state.basket.map(id => getPhoneById(state,id));

    let moreValues = Object.fromEntries(
        Object.entries(price).map(([key, value]) => [key, value.price])
    );

    function sum( obj ) {
        let sum = 0;
        for( let el in obj ) {
            if( obj.hasOwnProperty( el ) ) {
                sum += parseFloat( obj[el] );
            }
        }
        return sum;
    }

    let totalPrice = sum(moreValues);

    return totalPrice
};

export const getCategories = state => Object.values(state.categories);

export const getBasketPhonesWithCount = (state) => {
    const phoneCount = id => {
        const phoneId = state.basket.filter(basketId => basketId === id);
        return phoneId.length
    };

    const phoneWithCount = phone => phone.count = phoneCount(phone.id);

    const uniqueIds = state.basket.filter((value, index, self) => self.indexOf(value) === index);

    const phones = uniqueIds.map(id => getPhoneById(state,id));

    phones.map(phoneWithCount);

    return phones
};

export const getEditPhone = (state) => {
    for (let key in state.phones) {
        if ( key === state.phones.id) {
            return state.phones[key]
        }
    }
}